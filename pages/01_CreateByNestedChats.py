import autogen

config_list = autogen.config_list_from_json(
    env_or_file="./LLM_CONFIG_LIST.json",
)

filter_codellama = {"model": ["codellama"]}
filter_codegemma = {"model": ["codegemma"]}
filter_llama31 = {"model": ["llama3.1"]}
filter_mistral = {"model": ["mistral-nemo-instruct-2407"]}
filter_rakuten = {"model": ["rakutenai-7b-chat"]}

llm_config = {
    "cache_seed": 41,  # change the cache_seed for different trials. if set None, it will be random?
    "temperature": 0,
    "config_list": autogen.filter_config(config_list, filter_mistral),
    "timeout": 600,  # in seconds
    "price": [0, 0],
}




writer = autogen.AssistantAgent(
    name="Writer",
    llm_config=llm_config,
    max_consecutive_auto_reply=2,
    system_message="""
    あなたは、アプリケーション開発における設計の専門家です。
    クライアントからの要望や要求定義から、要件定義書を作成してください。
    作成する成果物としては基本的な要件定義の項目の他に以下のものを考慮して必要に応じて追加してください。
    ただしユーザーから指定があった場合はそれに合わせてください。
    - 機能用件
    - ユースケース図
    - 業務フロー図
    - システム設計書
    - アーキテクチャ図
    - 非機能要件
    ドキュメントはMarkdown形式で記述してください。
    フロー図が含む場合はMermaid形式で記述してください。
    """,
)


Reviewer = autogen.AssistantAgent(
    name="Reviewer",
    llm_config=llm_config,
    # max_consecutive_auto_reply=1,
    system_message="""
    あなたは、設計の品質を向上させるためのフィードバックを提供するレビュアーです。
    設計者(Writer)が提出した内容が要件に適合しているか、品質が高いかを確認することが求められます。
    ユーザーやクライアントから提出された内容に要件が適合しているか、品質が高いかを確認し、設計者(Writer)にフィードバックを提供してください。
    また文章の体裁、誤字脱字、表現の統一にも注意してフィードバックを提供してください。
    特に、以下の点についてレビューを行ってください。
    - 内容の明確性, 説明の適切さ
    - 要件の過不足の確認, 不足している場合は追加要件の提案
    - ドキュメントの体裁, 誤字脱字の確認
    - フロー図の正確性, 説明の明確さ
    - ドキュメントの一貫性, 表現の統一
    - その他の改善点
    """,
)


def reflection_message(recipient, messages, sender, config):
    print("Reflecting...")
    return f"次のドキュメントについてレビューとフィードバックを行ってください. \n\n {recipient.chat_messages_for_summary(sender)[-1]['content']}"

user_proxy = autogen.UserProxyAgent(
    name="User",
    human_input_mode="NEVER",
    is_termination_msg=lambda x: x.get("content", "").find("TERMINATE") >= 0,
    code_execution_config=False,
    # code_execution_config={
    #     "last_n_messages": 1,
    #     "work_dir": "my_code",
    #     "use_docker": False,
    # }
)

user_proxy.register_nested_chats(
    [
        {
            "recipient": Reviewer,
            "message": reflection_message,
            # "summary_method": "last_msg",
            "max_turns": 2,

         }
    ],
    trigger=writer
)

plan ="""
ある書店チェーンのシステム開発を考えています。
売上、受発注、棚卸、入金に関するシステムを実装したいです。
そのための要件定義を提案してください。
"""

requirement_doc = """
ある書店チェーンのシステム開発を考えています。
売上、受発注、棚卸、入金に関するシステムを実装したいです。
簡単な要件定義は以下の通りです。
システム開発の要件定義を行うためには、各機能の詳細な要件を明確にする必要があります。以下に、売上、受発注、棚卸、入金に関するシステムの要件定義の提案を示します。
この要件定義に基づいて、さらに必要な機能等を検討し、より詳細な要件定義書を作成してください。
### 1. 売上管理システム
- **機能要件**
  - 売上データの入力・管理：POS端末から売上データを自動的に取り込み、商品コードや日付、金額などの情報を管理します。
  - 日次、月次、年次の売上レポート生成：売上データをもとに、日次、月次、年次ごとの売上レポートを生成します。
  - 商品別、店舗別、期間別の売上分析：商品別、店舗別、期間別などの条件で売上データを抽出し、分析を行います。
  - 顧客情報の管理と売上履歴の追跡：顧客情報を管理し、購入履歴を追跡することで、顧客ごとに適切なマーケティング活動を行うことができます。
- **非機能要件**
  - データのリアルタイム更新：POS端末から取得した売上データは、即座にシステムに反映されるようにします。
  - 高速な検索・フィルタリング機能：売上データを検索したり、条件を指定してフィルタリングすることができます。
  - セキュリティ対策（データ暗号化、アクセス制御）：売上データを安全に管理するために、データの暗号化やアクセス制御を行います。

### 2. 受発注管理システム
- **機能要件**
  - 発注書の作成・管理：仕入先に発注する商品の情報を管理します。
  - 仕入先との連携機能（EDI対応など）：仕入先と連携して、商品の発注や受領などの情報を取り込みます。
  - 在庫状況に基づく自動発注機能：在庫状況を監視し、指定したレベルを下回った場合に自動的に発注を行います。
  - 発注履歴の追跡とレポート生成：発注履歴を追跡し、レポートを生成することができます。
- **非機能要件**
  - システムの可用性（24/7稼働）：受発注管理システムは、24時間365日稼働する必要があります。
  - エラーハンドリングと通知機能：システムでエラーが発生した場合、適切な通知を送信します。
  - 拡張性（将来的な機能追加に対応）：システムの拡張性を考慮し、将来的に新たな機能を追加することができます。

### 3. 棚卸管理システム
- **機能要件**
  - 在庫データの入力・管理：POS端末から取得した在庫データを管理します。
  - 定期的な棚卸作業のサポート（バーコードスキャン対応）：棚卸作業をサポートし、バーコードスキャンを使用して在庫数を確認することができます。
  - 在庫差異の検出と報告：在庫数と商品の発注数や受入数との差異を検出し、報告します。
  - 在庫評価とレポート生成：在庫評価を行い、レポートを生成します。
- **非機能要件**
  - データの整合性確保：在庫データの整合性を確保し、正確な情報を管理します。
  - モバイルデバイス対応：棚卸作業時に、モバイルデバイスを使用することができます。
  - ユーザーフレンドリーなインターフェース：使いやすいインターフェースを提供し、操作が容易になります。

### 4. 入金管理システム
- **機能要件**
  - 入金データの入力・管理：顧客から入金を確認し、入金データを管理します。
  - 顧客別の入金状況の追跡：顧客ごとに入金状況を追跡することができます。
  - 未入金の通知機能：未入金の顧客に対して、通知を送信することができます。
  - 入金レポートの生成：入金データをもとに、レポートを生成します。
- **非機能要件**
  - データの正確性と信頼性：入金データを正しく管理し、正確な情報を提供します。
  - セキュリティ対策（不正アクセス防止）：入金データを安全に管理するために、不正アクセス防止などのセキュリティ対策を行います。
  - システムのパフォーマンス（大量データ処理能力）：大量のデータを処理する必要がある場合、システムのパフォーマンスを最大限に活用することができます。
"""


user_proxy.initiate_chat(
    recipient=writer,
    message=plan,
    max_turns=2,
    # summary_method="last_msg"
)

